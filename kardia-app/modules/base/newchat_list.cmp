// This proivdes a list of all the chats that a person is currently in
$Version=2$
newchat_list "widget/component-decl"
    {
    width=282; height=150;
    
    // Parameters
    shows_invited "widget/parameter" {type="integer"; default=1;}
    shows_current "widget/parameter" {type="integer"; default=1;}
    shows_exited "widget/parameter" {type="integer"; default=0;}
    with_who "widget/parameter" {type="string"; default=runserver(user_name());}
    refreshes "widget/parameter" {type="integer";}
    
    chat_window "widget/parameter" {type="object";}
    
    refresh_timer "widget/timer"
	{
	msec=30000;
	auto_reset=0;
	interval_cn "widget/connector" { target=chat_list_osrc; event=Expire; action=Refresh;}
	}
	
    // The data source for listing chats
    // Need to add 
    chat_list_osrc "widget/osrc"
	{
	sql=runserver(" SELECT
			    :chat:c_chat_id,
			    :chat:c_title,
			    :chat:c_public,
			    :chat:c_last_send,
			    :member:c_status,
			    :member:s_username,
			    status= condition(:member:c_status == 'O',
					condition(:member:c_last_read_message_id < :chat:c_last_message_id,
					    '/apps/kardia/images/icons/chat_stat_open_new.png',
					    '/apps/kardia/images/icons/chat_stat_open_no_new.png'),
					condition(:member:c_status == 'C',
					    condition(:member:c_last_read_message_id < :chat:c_last_message_id,
						'/apps/kardia/images/icons/chat_stat_closed_new.png',
						'/apps/kardia/images/icons/chat_stat_closed_no_new.png'),
					    '/apps/kardia/images/icons/chat_stat_invite.png')),
			    chat=condition(:member:c_status == 'I', '/sys/images/green_check.gif', '/apps/kardia/images/icons/chat.png'),
			    close=" + condition(:shows_exited, "condition(:member:c_status != 'C' or :member:c_status is null, '/sys/images/red_x.gif', '/sys/images/trans_1.gif')", "'/sys/images/red_x.gif'") + "
			FROM
			    identity /apps/kardia/data/Kardia_DB/c_member/rows member,
			    /apps/kardia/data/Kardia_DB/c_chat/rows chat
			WHERE
			    :chat:c_chat_id *= :member:c_chat_id
			HAVING
			    -- Pick all that are pubic or the user has a matching record for
			    (:c_public == 'Y' or
			    :s_username == user_name()) " + 
			    condition(:shows_exited, "", "and not (:c_status == 'C')") + " 
			ORDER BY :chat:c_last_send DESC
			");
	baseobj="/apps/kardia/data/Kardia_DB/c_member/rows";
	replicasize=100;
	readahead=100;
	autoquery=onfirstreveal;
	endquery_cn "widget/connector" { target=refresh_timer; event=EndQuery; action=SetTimer; Time=30000; }
	indicates_activity = no;
	
	modified_cn "widget/connector"
	    {
	    event="Modified";
	    action="Refresh";
	    target=chat_list_osrc;
	    }
	    
	// This form has been inserted to take care of deleting rows from the chat table when requested
	deletion_form "widget/form"
	    {
	    allow_delete="yes";
	    confirm_delete="no";
	    }
	
	chat_list_table "widget/table"
	    {
	    width=282; height=150;
	    rowheight = 20;
	    mode=dynamicrow;
	    allow_selection = "yes";
	    show_selection = no;
	    demand_scrollbar = yes;
	    overlap_scrollbar = "yes";
	    colsep = 0;
		
	    cn_close_public "widget/connector"
		{
		event="Click";
		event_condition=runclient(:Column == "close" and :c_status is null);
		target=chat_list_osrc;
		action="Create";
		
		// Parameters
		c_chat_id=runclient(:c_chat_id);
		s_username=runclient(user_name());
		c_last_read_message_id=0;
		c_status=runclient("C");
		s_created_by=runclient(user_name());
		s_date_created=runclient(getdate());
		s_modified_by=runclient(user_name());
		s_date_modified=runclient(getdate());
		}
		
	    // Connector for non-recorded chats
	    cn_open_public "widget/connector"
		{
		event="Click";
		event_condition=runclient(:Column == 'chat' and :c_status is null);
		target=chat_list_osrc;
		action="Create";
		
		// Parameters to pass
		c_chat_id=runclient(:c_chat_id);
		s_username=runclient(user_name());
		c_last_read_message_id=0;
		c_status=runclient("O");
		s_created_by=runclient(user_name());
		s_date_created=runclient(getdate());
		s_modified_by=runclient(user_name());
		s_date_modified=runclient(getdate());
		}
		
	    cn_chat_window "widget/connector"
		{
		event="Click";
		event_condition=runclient(:Column == 'chat');
		target=chat_window;
		action="Instantiate";
		
		// Parameters to pass
		chat_id = runclient(:c_chat_id);
		    
		} // End cn_chat_window
	    
	    // Connector for already recorded chats
	    cn_open_invited "widget/connector"
		{
		event="Click";
		event_condition=runclient(:Column == 'chat' and :c_status is not null);
		target=chat_list_osrc;
		action="Modify";
		
		// Parameters to pass
		c_status=runclient("O");
		}
		
	    cn_close_open_chat "widget/connector"
		{
		event="Click";
		event_condition=runclient(:Column == "close" and :c_status == "O");
		target=chat_list_osrc;
		action="Modify";
		
		// Parameters
		c_status=runclient("C");
		}
		
	    cn_decline_invitation "widget/connector"
		{
		event="Click";
		event_confirm=runclient("Are you sure you want to quit chat \"" + :c_title + "\"?");
		event_condition=runclient(:Column == "close" and :c_status == "I");
		target=deletion_form;
		action="Delete";
		}
	    
	    // This was added due to some slight errors in the way the table handles adding new columns, apparently
	    cn_public_refresh "widget/connector"{target=chat_list_osrc; event="Click"; condition=runclient(:c_chat_status is null); action="Refresh";}
	    
	    status_indicator "widget/table-column" {title=""; fieldname="status";width=28; type="image";}
	    member_col "widget/table-column" {title="Chat Name"; fieldname="c_title"; width=175;}
	    chat_image "widget/table-column" {title=""; fieldname="chat"; type="image"; width=28;}
	    close_image "widget/table-column" {title="";fieldname="close";type="image";width=28;}
	    } // End chat_list_table
	} // End chat_list_osrc
    } // End newchat_list