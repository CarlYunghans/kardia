$Version=2$
// Created by:	Greg Beeley
// Edited by:	Tumbler Terrall
// Last change:	12/17/2014 03:22 PM
timeline_svg "system/report"
    {
    document_format="text/plain";
    content_type="image/svg+xml";
    pagewidth=255;
    pageheight=255;
    marginleft=0;
    marginright=0;
    margintop=0;
    marginbottom=0;
    text_pagebreak = no;

    // Partner ID
    //partner "report/parameter" { type=string; allowchars="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"; default=""; }
    //cclist "report/parameter" { type=string; allowchars="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,:-"; default=""; }
    id "report/parameter" { type=integer; }
    image_width "report/parameter" { type=double; default=450.0; }
    timeline_width "report/parameter" { type=double; default=430.0; }
    timeline_end "report/parameter" { type=double; default=440.0; }
    timeline_start "report/parameter" { type=double; default=10.0; }

    // First and last dates for events
    first_last_qy "report/query"
	{
	sql = runserver("select first_date=min(:e_activity_date), last_date=dateadd(year,1,max(:e_activity_date)) from /apps/kardia/data/Kardia_DB/e_activity/rows where :e_activity_group_id = :this:id");
	// We add a year here because we want to be able to see UP TO the next year.
	}

    // Optimum date block interval
    interval_qy "report/query"
	{
	sql = "select range = datediff(year,:first_last_qy:first_date,:first_last_qy:last_date), interval = condition((datediff(year,:first_last_qy:first_date,:first_last_qy:last_date) + 1) / 10 > 0, (datediff(year,:first_last_qy:first_date,:first_last_qy:last_date) + 1) / 9, 1)";
	}

    // Date bars
    datebar_qy "report/query"
	{
	// A dummy source just to nab N records
	sql = runserver("select :name from /apps/kardia/modules/base limit " + (:interval_qy:range + 1));
	// Range is plus 1 because we're plotting an extra year.
	}

    entrydate_qy "report/query"
	{
	// Select all the dates from entries
	sql = "select :e_activity_date, :e_activity_type from /apps/kardia/data/Kardia_DB/e_activity/rows where :e_activity_group_id = :this:id 
		order by :e_activity_date";
	}

    entrycompute_qy "report/query"
	{
	// Computes the x value for the entires and builds the strings to insert into the svg.
	sql =  'declare object comp ;
		select  :comp:year_percent = ((1.0 * (datepart(year,:entrydate_qy:e_activity_date) - datepart(year,:first_last_qy:first_date))) / (datepart(year,:first_last_qy:last_date) - datepart(year,:first_last_qy:first_date))) ; 
		select :comp:month_percent = (1.0 * (datepart(month,:entrydate_qy:e_activity_date) - 1) / 12 / :interval_qy:range) ; 
		select :comp:day_percent = (1.0 * (datepart(day,:entrydate_qy:e_activity_date) - 1) / 365 / :interval_qy:range) ; 
		select :comp:full_percent = (:comp:year_percent + :comp:month_percent + :comp:day_percent) ; 
		select :comp:x_value = (:comp:full_percent * :this:timeline_width + :this:timeline_start) ;
		select :comp:drawgreenline = (
				\'<line x1="\' + :comp:x_value + \'px" y1="5px" x2="\' + :comp:x_value + \'px" y2="18px" 
				    stroke-width="1px"/>\n\') ;
		select :comp:drawredtag = (
				\'<rect x="\' + (:comp:x_value - 2) + \'" y="2" rx="2" ry="2" width="4" height="8" 
				    style="fill:rgb(230,0,0);stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<polygon points="\' + (:comp:x_value - 2) + \',9 \' + (:comp:x_value + 2) + \',9 \' + (:comp:x_value) + \',12" 
				    style="fill:rgb(230,0,0);stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n\') ;
		select :comp:draworangetag = (
				\'<rect x="\' + (:comp:x_value - 2) + \'" y="2" rx="2" ry="2" width="4" height="8" 
				    style="fill:rgb(220,170,20);stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<polygon points="\' + (:comp:x_value - 2) + \',9 \' + (:comp:x_value + 2) + \',9 \' + (:comp:x_value) + \',12" 
				    style="fill:rgb(220,170,20);stroke-width:0" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n\') ;
		select :comp:drawgreentag = (
				\'<rect x="\' + (:comp:x_value - 1) + \'" y="10" width="2" height="0" 
				    style="fill:rgb(220,140,0);stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<rect x="\' + (:comp:x_value - 2) + \'" y="2" rx="2" ry="2" width="4" height="8" 
				   style="fill:rgb(0,180,0);stroke-width:0;" \' + 
				   condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
				       "transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<polygon points="\' + (:comp:x_value - 2) + \',9 \' + (:comp:x_value + 2) + \',9 \' + (:comp:x_value) + \',12" 
				    style="fill:rgb(0,180,0);stroke-width:0" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n\') ;
		select :comp:drawbluetag = (
				\'<rect x="\' + (:comp:x_value - 2) + \'" y="2" rx="2" ry="2" width="4" height="8" 
				    style="fill:rgb(0,0,250);stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<polygon points="\' + (:comp:x_value - 2) + \',9 \' + (:comp:x_value + 2) + \',9 \' + (:comp:x_value) + \',12" 
				    style="fill:rgb(0,0,250);stroke-width:0" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n\') ;
		select :comp:drawpurpletag = (
				\'<rect x="\' + (:comp:x_value - 2) + \'" y="2" rx="2" ry="2" width="4" height="8" 
				    style="fill:rgb(200,41,256);stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<polygon points="\' + (:comp:x_value - 2) + \',9 \' + (:comp:x_value + 2) + \',9 \' + (:comp:x_value) + \',12" 
				    style="fill:rgb(200,41,256);stroke-width:0" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n\') ;
		select :comp:drawblacktag = (
				\'<rect x="\' + (:comp:x_value - 2) + \'" y="2" rx="2" ry="2" width="4" height="8" 
				    style="fill:black;stroke-width:0;" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n
				<polygon points="\' + (:comp:x_value - 2) + \',9 \' + (:comp:x_value + 2) + \',9 \' + (:comp:x_value) + \',12" 
				    style="fill:black;stroke-width:0" \' + 
				    condition(((:entrydate_qy:cx__rowid / 2.0) - ((:entrydate_qy:cx__rowid - 1) / 2)) == .5, 
					"transform=\\"rotate(180, " + :comp:x_value + ", 12)\\"", "") + \' />\n\') ;
		select :comp:drawdottedredline = (
				\'<line x1="\' + :comp:x_value + \'px" y1="0px" x2="\' + :comp:x_value + \'px" y2="22px" 
				    stroke="rgb(220,0,0)" stroke-width="1px" stroke-dasharray="3,2"/>\n\') ;
		select :comp:drawdottedblueline = (
				\'<line x1="\' + :comp:x_value + \'px" y1="0px" x2="\' + :comp:x_value + \'px" y2="22px" 
				    stroke="rgb(0,0,220)" stroke-width="1px" stroke-dasharray="3,2"/>\n\') ;
		select :comp:drawdottedyellowline = (
				\'<line x1="\' + :comp:x_value + \'px" y1="0px" x2="\' + :comp:x_value + \'px" y2="22px" 
				    stroke="rgb(220,180,0)" stroke-width="1px" stroke-dasharray="3,2"/>\n\') ;
		select :comp:drawbluearrow = (
				\'<polygon points="\' + 
				    (:comp:x_value - 3) + \',11 \' + (:comp:x_value - 7) + \',6 \' + (:comp:x_value + 9) + \',11 \' + (:comp:x_value - 7) + \',16" 
				    style="fill:blue;stroke-width:0px" />\n\') ;
		--Store values to be used outside
		select draw_green_line		= :comp:drawgreenline,
		       draw_red_tag		= :comp:drawredtag,
		       draw_orange_tag		= :comp:draworangetag,
		       draw_green_tag		= :comp:drawgreentag,
		       draw_blue_tag		= :comp:drawbluetag,
		       draw_purple_tag		= :comp:drawpurpletag,
		       draw_black_tag		= :comp:drawblacktag,
		       draw_blue_arrow		= :comp:drawbluearrow,
		       draw_dotted_red_line	= :comp:drawdottedredline,
		       draw_dotted_blue_line	= :comp:drawdottedblueline,
		       draw_dotted_yellow_line	= :comp:drawdottedyellowline
		       ';
	}

    main_form "report/form"
	{
	source=first_last_qy,interval_qy;

	// SVG header
	hdr "report/area"
	    {
	    x=0; y=0; width=255; height=0;
	    value=runserver('<?xml version="1.0" standalone="no"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg width="' + :this:image_width + 'px" height="32px" viewBox="0 0 ' + :this:image_width + 'px 32px" xmlns="http://www.w3.org/2000/svg" version="1.1">\n');
	    }

	// Draw lines corresponding to each year on the visual timeline
	datebars_begin "report/area"
	    {
	    width=255; height=0;
	    value=runserver('<g stroke="rgb(175,175,175)" shape-rendering="crispEdges">\n');
	    //value=runserver('<g stroke="rgb(224,224,224)">\n');
	    }

	datebar_form "report/form"
	    {
	    source=datebar_qy;

	    one_datebar "report/area"
		{
		width=255; height=0;
		value=runserver(
			'<line 
			    x1="' + (:this:timeline_end - ((1.0 * :datebar_qy:cx__rowid) * (:this:timeline_width / :interval_qy:range))) + 'px" 
			    y1="0" 
			    x2="' + (:this:timeline_end - ((1.0 * :datebar_qy:cx__rowid) * (:this:timeline_width / :interval_qy:range))) + 'px" 
			    y2="22px" 
			    stroke-width="1px"' +  
			    condition(((:datebar_qy:cx__rowid) / :interval_qy:interval) * :interval_qy:interval == :datebar_qy:cx__rowid, '', 
				' stroke-dasharray="1,3"') + '/>\n');
		}
	    }

	datebars_end "report/area"
	    {
	    width=255; height=0;
	    value=runserver('</g>\n');
	    }

	// Put year numbers on the visual timeline
	datelabels_begin "report/area" { width=255; height=0; value=runserver('<g fill="#334466">\n'); }

	datelabels "report/form"
	    {
	    source=datebar_qy;

	    one_label "report/area"
		{
		width=255; height=0;
		condition=runserver(((:datebar_qy:cx__rowid) / :interval_qy:interval) * :interval_qy:interval == :datebar_qy:cx__rowid);
		value=runserver(
			'<text 
			    x="' + ((:this:timeline_end) - ((1.0 * :datebar_qy:cx__rowid) * (:this:timeline_width / :interval_qy:range)) - 10) + 'px" 
			    y="31px" 
			    font-family="Arial,Helvetica,Sans-serif" font-size="9">' + 
			    (datepart(year,:first_last_qy:last_date) - :datebar_qy:cx__rowid) + '</text>\n');
		}
	    }


	datelabels_end "report/area" { width=255; height=0; value=runserver('</g>\n'); }

	// Put the enries form the activity timeline on the visual timeline
	entrydates_begin "report/area"
	    {
	    width=255; height=0;
	    value=runserver('<g>\n');
	    }

	entrydates_form "report/form"
	    {
	    source = entrydate_qy, entrycompute_qy;
	    
	    one_entry "report/area"
		{
		width=255; height=0;
		// Look at this as an if-elseif block
		value=runserver( condition(
			    :entrydate_qy:e_activity_type == 'HEAD',	:draw_dotted_red_line,	    condition( // Today's date
			    :entrydate_qy:e_activity_type == 'PAR',	:draw_dotted_blue_line,	    condition( // Partner added to system
			    :entrydate_qy:e_activity_type == 'REL',	:draw_blue_tag,		    condition( // Relationship
			    :entrydate_qy:e_activity_type == 'GIFT',	:draw_green_tag,	    condition( // Donation
			    :entrydate_qy:e_activity_type == 'TAG',	:draw_red_tag,		    condition( // Tag added
			    :entrydate_qy:e_activity_type == 'COMM',	:draw_blue_tag,		    condition( // Communication
			    :entrydate_qy:e_activity_type == 'CONT',	:draw_blue_tag,		    condition( // Contact (email, phone call, etc.)
			    :entrydate_qy:e_activity_type == 'NOTE',	:draw_purple_tag,	    condition( // Note
			    :entrydate_qy:e_activity_type == 'FILE',	:draw_orange_tag,	    condition( // File uploaded
			    :entrydate_qy:e_activity_type == 'ADDR',	:draw_dotted_yellow_line,   condition( // Address changed
			    :entrydate_qy:e_activity_type == 'DATA',	:draw_orange_tag,	    condition( // Data Item/group activity
			    :entrydate_qy:e_activity_type == 'TRK',	:draw_blue_arrow,	    condition( // New Track
			    1,						:draw_black_tag,	    "ERROR"    // The default option. (Should always be true)
				))))))))))))));
		}
	    }
	entrydates_end "report/area" {
	    width=255; height=0;
	    value=runserver('</g>\n');
	    }

	ftr "report/area"
	    {
	    width=255; height=0;
	    value=runserver('</svg>\n');
	    }
	}
    }
